resource "aws_iam_policy" "GRACE_Org_Admins_Policy" {
  name        = "GRACE_Org_Admins_Policy"
  path        = "/"
  description = "GRACE_Org_Admins_Policy"

  policy = <<EOF
{
    "Version": "2012-10-17",
    "Statement": [
        {
            "Sid": "VisualEditor0",
            "Effect": "Allow",
            "Action": [
                "ssm:SendCommand",
                "ssm:CancelCommand",
                "ssm:ListCommands",
                "rds:*",
                "redshift:*",
                "ssm:SendAutomationSignal",
                "ssm:CreateActivation",
                "ssm:ListInstanceAssociations",
                "ssm:UpdateAssociation",
                "ssm:UpdateAssociationStatus",
                "ssm:DescribeAutomationExecutions",
                "ssm:GetMaintenanceWindowTask",
                "ssm:DescribeMaintenanceWindowExecutionTaskInvocations",
                "ssm:RegisterPatchBaselineForPatchGroup",
                "ssm:DescribeAutomationStepExecutions",
                "ssm:RemoveTagsFromResource",
                "ssm:ListResourceDataSync",
                "ssm:ListDocuments",
                "ssm:UpdateDocument",
                "ssm:UpdateManagedInstanceRole",
                "ssm:UpdatePatchBaseline",
                "ssm:GetMaintenanceWindowExecutionTask",
                "ssm:RegisterTaskWithMaintenanceWindow",
                "ssm:GetMaintenanceWindowExecution",
                "ssm:CreateDocument",
                "ssm:UpdateMaintenanceWindow",
                "ssm:StartAutomationExecution",
                "cloudwatch:*",
                "ssm:DescribeMaintenanceWindows",
                "ssm:CreateAssociation",
                "ssm:DescribeEffectivePatchesForPatchBaseline",
                "ecs:*",
                "ec2:*",
                "ssm:DescribeDocumentPermission",
                "ssm:GetAutomationExecution",
                "ssm:DescribePatchGroups",
                "ssm:GetDefaultPatchBaseline",
                "ssm:DescribeDocument",
                "cloudtrail:*",
                "ssm:ListAssociationVersions",
                "ssm:PutConfigurePackageResult",
                "ssm:DescribePatchGroupState",
                "ssm:UpdateMaintenanceWindowTask",
                "ssm:CreatePatchBaseline",
                "ssm:DescribeMaintenanceWindowExecutionTasks",
                "ssm:DescribeInstancePatchStatesForPatchGroup",
                "ssm:GetDocument",
                "ssm:CreateResourceDataSync",
                "ssm:GetInventorySchema",
                "ssm:CreateMaintenanceWindow",
                "ssm:GetMaintenanceWindow",
                "ssm:GetPatchBaseline",
                "ssm:ListInventoryEntries",
                "ssm:DescribeAssociation",
                "cognito-identity:*",
                "guardduty:*",
                "ssm:DescribePatchBaselines",
                "ssm:DeregisterPatchBaselineForPatchGroup",
                "ssm:StopAutomationExecution",
                "elasticbeanstalk:*",
                "ssm:DescribeInstanceInformation",
                "ssm:ListTagsForResource",
                "ssm:CreateAssociationBatch",
                "ssm:ModifyDocumentPermission",
                "ssm:DescribeDocumentParameters",
                "ssm:RegisterDefaultPatchBaseline",
                "ssm:UpdateInstanceAssociationStatus",
                "acm:*",
                "ssm:DeregisterTargetFromMaintenanceWindow",
                "ssm:ListDocumentVersions",
                "ssm:UpdateDocumentDefaultVersion",
                "ssm:DescribeInstancePatches",
                "ssm:UpdateMaintenanceWindowTarget",
                "autoscaling:*",
                "ssm:GetMaintenanceWindowExecutionTaskInvocation",
                "ssm:DeleteActivation",
                "ssm:StartAssociationsOnce",
                "ssm:UpdateInstanceInformation",
                "ssm:AddTagsToResource",
                "opsworks:*",
                "config:*",
                "ssm:PutComplianceItems",
                "inspector:*",
                "directconnect:*",
                "ssm:RegisterTargetWithMaintenanceWindow",
                "cloudformation:*",
                "iam:*",
                "waf:*",
                "servicecatalog:*",
                "ssm:ListCommandInvocations",
                "shield:*",
                "ssm:DescribeMaintenanceWindowTasks",
                "ssm:GetPatchBaselineForPatchGroup",
                "ssm:DeletePatchBaseline",
                "ssm:DescribeMaintenanceWindowExecutions",
                "ssm:GetManifest",
                "ds:*",
                "batch:*",
                "ssm:DescribeInstancePatchStates",
                "artifact:*",
                "ssm:DeleteResourceDataSync",
                "ssm:DeregisterTaskFromMaintenanceWindow",
                "ssm:DescribeInstanceAssociationsStatus",
                "ssm:DescribeInstanceProperties",
                "ssm:GetDeployablePatchSnapshotForInstance",
                "ssm:DescribeMaintenanceWindowTargets",
                "cloudhsm:*",
                "ssm:DeleteMaintenanceWindow",
                "ssm:DescribeEffectiveInstanceAssociations",
                "ssm:GetInventory",
                "ssm:DescribeActivations",
                "ssm:GetCommandInvocation",
                "ssm:DeleteAssociation",
                "ssm:DeregisterManagedInstance",
                "trustedadvisor:*",
                "ssm:PutInventory",
                "sso:*",
                "lambda:*",
                "ssm:ListAssociations",
                "ssm:DeleteDocument",
                "elasticache:*",
                "ssm:DescribeAvailablePatches"
            ],
            "Resource": "*"
        }
    ]
}
EOF
}

resource "aws_iam_policy" "GRACE_Org_Finance_Policy" {
  name        = "GRACE_Org_Finance_Policy"
  path        = "/"
  description = "GRACE_Org_Finance_Policy"

  policy = <<EOF
{
    "Version": "2012-10-17",
    "Statement": [
        {
            "Sid": "VisualEditor0",
            "Effect": "Allow",
            "Action": [
                "aws-portal:*",
                "pricing:*",
                "budgets:*"
            ],
            "Resource": "*"
        }
    ]
}
EOF
}

resource "aws_iam_policy" "GRACE_Org_ViewOnly_Part1_Policy" {
  name        = "GRACE_Org_ViewOnly_Part1_Policy"
  path        = "/"
  description = "GRACE_Org_ViewOnly_Part1_Policy"

  policy = <<EOF
{
    "Version": "2012-10-17",
    "Statement": [
        {
            "Sid": "VisualEditor0",
            "Effect": "Allow",
            "Action": [
                "config:GetComplianceSummaryByConfigRule",
                "opsworks:GetHostnameSuggestion",
                "ssm:ListCommands",
                "route53:ListTrafficPolicyVersions",
                "servicecatalog:DescribeProvisioningParameters",
                "cloudtrail:GetTrailStatus",
                "route53:TestDNSAnswer",
                "route53:GetHealthCheck",
                "servicecatalog:DescribeProductView",
                "lambda:GetFunctionConfiguration",
                "batch:DescribeComputeEnvironments",
                "ecs:DescribeTaskDefinition",
                "redshift:DescribeClusterSubnetGroups",
                "config:GetComplianceDetailsByResource",
                "ssm:DescribeAutomationExecutions",
                "ssm:GetMaintenanceWindowTask",
                "cloudformation:DescribeStackEvents",
                "ssm:DescribeAutomationStepExecutions",
                "cloudfront:GetStreamingDistribution",
                "redshift:DescribeClusterVersions",
                "ec2:DescribeScheduledInstanceAvailability",
                "dynamodb:DescribeContinuousBackups",
                "logs:FilterLogEvents",
                "lambda:GetAlias",
                "cloudfront:GetDistributionConfig",
                "cloudformation:DescribeChangeSet",
                "trustedadvisor:DescribeNotificationPreferences",
                "cloudfront:GetCloudFrontOriginAccessIdentityConfig",
                "redshift:DescribeClusterSecurityGroups",
                "events:DescribeRule",
                "redshift:DescribeEventSubscriptions",
                "redshift:DescribeOrderableClusterOptions",
                "ssm:GetMaintenanceWindowExecutionTask",
                "lambda:GetEventSourceMapping",
                "route53:ListVPCAssociationAuthorizations",
                "route53:GetReusableDelegationSetLimit",
                "ssm:GetMaintenanceWindowExecution",
                "ecr:GetAuthorizationToken",
                "cloudwatch:GetMetricStatistics",
                "events:TestEventPattern",
                "route53:ListTagsForResources",
                "route53:GetAccountLimit",
                "redshift:DescribeSnapshotCopyGrants",
                "ec2:GetPasswordData",
                "cloudformation:GetStackPolicy",
                "ec2:DescribeScheduledInstances",
                "config:GetTagKeys",
                "dynamodb:GetShardIterator",
                "ssm:DescribeEffectivePatchesForPatchBaseline",
                "dynamodb:DescribeReservedCapacity",
                "cloudwatch:DescribeAlarms",
                "redshift:GetClusterCredentials",
                "ssm:DescribeDocumentPermission",
                "route53:GetTrafficPolicy",
                "batch:DescribeJobQueues",
                "ssm:GetAutomationExecution",
                "ssm:GetDefaultPatchBaseline",
                "ssm:DescribeDocument",
                "config:GetComplianceSummaryByResourceType",
                "dynamodb:ListTagsOfResource",
                "ssm:PutConfigurePackageResult",
                "ssm:DescribePatchGroupState",
                "redshift:DescribeEventCategories",
                "cloudformation:EstimateTemplateCost",
                "redshift:DescribeReservedNodeOfferings",
                "batch:DescribeJobs",
                "cloudwatch:DescribeAlarmHistory",
                "config:GetComplianceDetailsByConfigRule",
                "dynamodb:DescribeReservedCapacityOfferings",
                "lambda:ListTags",
                "ssm:DescribeInstancePatchStatesForPatchGroup",
                "ssm:GetDocument",
                "redshift:DescribeLoggingStatus",
                "ssm:GetInventorySchema",
                "route53:GetTrafficPolicyInstance",
                "ssm:GetMaintenanceWindow",
                "redshift:DescribeTableRestoreStatus",
                "ecs:DescribeTasks",
                "config:DeliverConfigSnapshot",
                "dynamodb:DescribeLimits",
                "directconnect:ConfirmConnection",
                "ssm:GetPatchBaseline",
                "trustedadvisor:DescribeCheckRefreshStatuses",
                "ssm:DescribeAssociation",
                "cloudfront:GetStreamingDistributionConfig",
                "logs:TestMetricFilter",
                "config:GetResourceConfigHistory",
                "dynamodb:Query",
                "dynamodb:DescribeStream",
                "trustedadvisor:DescribeCheckItems",
                "route53:ListTagsForResource",
                "dynamodb:ListStreams",
                "redshift:DescribeReservedNodes",
                "ssm:DescribeInstanceInformation",
                "cloudtrail:ListPublicKeys",
                "ssm:ListTagsForResource",
                "dynamodb:DescribeGlobalTable",
                "apigateway:HEAD",
                "ssm:DescribeDocumentParameters",
                "redshift:DescribeHsmConfigurations",
                "ec2:GetHostReservationPurchasePreview",
                "ec2:DescribeVolumesModifications",
                "ssm:DescribeInstancePatches",
                "cloudformation:DescribeStackResource",
                "servicecatalog:DescribeRecord",
                "redshift:DescribeDefaultClusterParameters",
                "ec2:GetConsoleScreenshot",
                "ssm:GetMaintenanceWindowExecutionTaskInvocation",
                "cloudfront:GetDistribution",
                "ec2:GetLaunchTemplateData",
                "dynamodb:DescribeTable",
                "redshift:DescribeClusterSnapshots",
                "cloudwatch:DescribeAlarmsForMetric",
                "cloudtrail:ListTags",
                "logs:GetLogEvents",
                "dynamodb:GetItem",
                "servicecatalog:DescribeProvisioningArtifact",
                "apigateway:GET",
                "ecr:BatchCheckLayerAvailability",
                "directconnect:ConfirmPublicVirtualInterface",
                "dynamodb:BatchGetItem",
                "cloudwatch:GetDashboard",
                "ec2:DescribeVpnConnections",
                "autoscaling:DescribeTags",
                "ecr:GetDownloadUrlForLayer",
                "route53:ListTrafficPolicyInstancesByHostedZone",
                "cloudformation:DescribeStackResources",
                "dynamodb:Scan",
                "ec2:GetReservedInstancesExchangeQuote",
                "ecs:DescribeClusters",
                "directconnect:ConfirmPrivateVirtualInterface",
                "trustedadvisor:DescribeCheckSummaries",
                "servicecatalog:DescribePortfolio",
                "cloudfront:ListTagsForResource",
                "cloudformation:GetTemplate",
                "ecr:BatchGetImage",
                "ecr:DescribeImages",
                "redshift:DescribeResize",
                "batch:DescribeJobDefinitions",
                "ec2:DescribeElasticGpus",
                "route53:GetHostedZoneLimit",
                "ssm:ListCommandInvocations",
                "dynamodb:DescribeBackup",
                "dynamodb:GetRecords",
                "route53:ListTrafficPolicyInstances",
                "route53:GetTrafficPolicyInstanceCount",
                "cloudwatch:GetMetricData",
                "lambda:GetAccountSettings",
                "ssm:GetPatchBaselineForPatchGroup",
                "cloudtrail:GetEventSelectors",
                "ec2:GetConsoleOutput",
                "ssm:GetManifest",
                "ssm:DescribeInstancePatchStates",
                "servicecatalog:DescribeProduct",
                "route53:ListTrafficPolicies",
                "cloudfront:GetCloudFrontOriginAccessIdentity",
                "cloudformation:DescribeAccountLimits",
                "ecs:DescribeServices",
                "ecs:DescribeContainerInstances",
                "ssm:DescribeInstanceAssociationsStatus",
                "redshift:DescribeClusterParameters",
                "ssm:DescribeInstanceProperties",
                "route53:GetQueryLoggingConfig",
                "ssm:GetDeployablePatchSnapshotForInstance",
                "redshift:DescribeHsmClientCertificates",
                "lambda:GetFunction",
                "ec2:DescribeTags",
                "cloudfront:GetInvalidation",
                "redshift:DescribeTags",
                "redshift:DescribeClusterParameterGroups",
                "ssm:DescribeEffectiveInstanceAssociations",
                "dynamodb:DescribeTimeToLive",
                "apigateway:OPTIONS",
                "ssm:GetInventory",
                "ssm:DescribeActivations",
                "cloudformation:GetTemplateSummary",
                "ssm:GetCommandInvocation",
                "servicecatalog:DescribeConstraint",
                "cloudformation:PreviewStackUpdate",
                "servicecatalog:DescribeProductAsAdmin",
                "route53:ListTrafficPolicyInstancesByPolicy",
                "config:GetResources",
                "lambda:GetPolicy",
                "ecr:GetRepositoryPolicy",
                "ssm:DescribeAvailablePatches"
            ],
            "Resource": "*"
        }
    ]
}
EOF
}

resource "aws_iam_policy" "GRACE_Org_ViewOnly_Part2_Policy" {
  name        = "GRACE_Org_ViewOnly_Part2_Policy"
  path        = "/"
  description = "GRACE_Org_ViewOnly_Part2_Policy"

  policy = <<EOF
{
    "Version": "2012-10-17",
    "Statement": [
        {
            "Sid": "VisualEditor0",
            "Effect": "Allow",
            "Action": [
                "waf:GetRegexPatternSet",
                "iam:GetAccountPasswordPolicy",
                "ds:DescribeSnapshots",
                "iam:GenerateServiceLastAccessedDetails",
                "waf:GetXssMatchSet",
                "lambda:GetFunctionConfiguration",
                "batch:DescribeComputeEnvironments",
                "guardduty:GetDetector",
                "ecs:DescribeTaskDefinition",
                "lightsail:GetInstanceAccessDetails",
                "iam:SimulateCustomPolicy",
                "cognito-idp:AdminListUserAuthEvents",
                "acm:GetCertificate",
                "shield:DescribeSubscription",
                "ec2:DescribeScheduledInstanceAvailability",
                "rds:DownloadDBLogFilePortion",
                "iam:GetCredentialReport",
                "lambda:GetAlias",
                "sso:ListProfileAssociations",
                "lightsail:GetOperationsForResource",
                "waf:GetWebACL",
                "iam:GetRole",
                "ds:DescribeTrusts",
                "iam:GetPolicy",
                "lambda:GetEventSourceMapping",
                "cognito-idp:GetCSVHeader",
                "waf:GetSizeConstraintSet",
                "guardduty:GetMasterAccount",
                "cognito-sync:QueryRecords",
                "lightsail:GetStaticIp",
                "ecr:GetAuthorizationToken",
                "cognito-sync:GetBulkPublishDetails",
                "cognito-idp:GetGroup",
                "cognito-idp:DescribeRiskConfiguration",
                "shield:DescribeAttack",
                "ec2:GetPasswordData",
                "ec2:DescribeScheduledInstances",
                "waf:GetSampledRequests",
                "waf:GetSqlInjectionMatchSet",
                "iam:GetOpenIDConnectProvider",
                "inspector:DescribeAssessmentRuns",
                "guardduty:GetInvitationsCount",
                "iam:GetRolePolicy",
                "lightsail:GetKeyPairs",
                "sso:GetTrust",
                "iam:GenerateCredentialReport",
                "cognito-idp:AdminGetDevice",
                "batch:DescribeJobQueues",
                "guardduty:GetFindings",
                "ds:DescribeEventTopics",
                "waf:GetGeoMatchSet",
                "ds:GetSnapshotLimits",
                "cloudhsm:ListTagsForResource",
                "waf:GetIPSet",
                "ds:ListTagsForResource",
                "iam:GetServiceLastAccessedDetails",
                "cognito-identity:GetIdentityPoolRoles",
                "cognito-idp:AdminGetUser",
                "sso:GetPermissionSet",
                "iam:GetServiceLinkedRoleDeletionStatus",
                "cognito-sync:DescribeIdentityUsage",
                "batch:DescribeJobs",
                "lambda:ListTags",
                "cloudhsm:DescribeLunaClient",
                "inspector:DescribeCrossAccountAccessRole",
                "cloudhsm:GetConfig",
                "lightsail:GetDomains",
                "cognito-idp:GetUserAttributeVerificationCode",
                "sso:GetProfile",
                "ecs:DescribeTasks",
                "cognito-identity:DescribeIdentityPool",
                "lightsail:GetOperations",
                "sso:ListPermissionSets",
                "sso:ListDirectoryAssociations",
                "sso:GetApplicationTemplate",
                "iam:GetSSHPublicKey",
                "guardduty:GetIPSet",
                "inspector:PreviewAgents",
                "artifact:Get",
                "cognito-sync:DescribeDataset",
                "sso:GetApplicationInstance",
                "iam:GetContextKeysForCustomPolicy",
                "cognito-idp:GetDevice",
                "cognito-sync:ListRecords",
                "rds:ListTagsForResource",
                "cognito-identity:LookupDeveloperIdentity",
                "lightsail:DownloadDefaultKeyPair",
                "inspector:DescribeResourceGroups",
                "iam:GetUser",
                "guardduty:GetFindingsStatistics",
                "artifact:DownloadAgreement",
                "cognito-identity:GetCredentialsForIdentity",
                "iam:GetPolicyVersion",
                "ds:ListAuthorizedApplications",
                "guardduty:GetThreatIntelSet",
                "ec2:GetHostReservationPurchasePreview",
                "ec2:DescribeVolumesModifications",
                "cognito-identity:GetOpenIdToken",
                "ec2:GetConsoleScreenshot",
                "cognito-idp:DescribeUserPool",
                "iam:SimulatePrincipalPolicy",
                "ec2:GetLaunchTemplateData",
                "inspector:GetTelemetryMetadata",
                "waf:GetChangeToken",
                "waf:GetByteMatchSet",
                "waf:GetRegexMatchSet",
                "iam:GetAccountAuthorizationDetails",
                "waf:GetRule",
                "lightsail:GetInstanceState",
                "cognito-identity:DescribeIdentity",
                "ecr:BatchCheckLayerAvailability",
                "iam:GetServerCertificate",
                "waf:GetRateBasedRule",
                "ec2:DescribeVpnConnections",
                "iam:GetAccessKeyLastUsed",
                "ecr:GetDownloadUrlForLayer",
                "guardduty:GetMembers",
                "cognito-sync:GetIdentityPoolConfiguration",
                "ec2:GetReservedInstancesExchangeQuote",
                "acm:ListTagsForCertificate",
                "ecs:DescribeClusters",
                "acm:DescribeCertificate",
                "iam:GetUserPolicy",
                "inspector:DescribeAssessmentTargets",
                "lightsail:GetInstancePortStates",
                "ecr:BatchGetImage",
                "ecr:DescribeImages",
                "batch:DescribeJobDefinitions",
                "sso:ListApplicationTemplates",
                "iam:GetGroupPolicy",
                "inspector:DescribeAssessmentTemplates",
                "ec2:DescribeElasticGpus",
                "elasticache:ListTagsForResource",
                "ds:VerifyTrust",
                "cloudhsm:DescribeHsm",
                "sso:DescribePermissionsPolicies",
                "shield:DescribeProtection",
                "iam:GetServiceLastAccessedDetailsWithEntities",
                "lambda:GetAccountSettings",
                "sso:ListProfiles",
                "inspector:DescribeRulesPackages",
                "lightsail:GetInstance",
                "iam:GetGroup",
                "iam:GetContextKeysForPrincipalPolicy",
                "ec2:GetConsoleOutput",
                "waf:GetChangeTokenStatus",
                "cognito-sync:GetCognitoEvents",
                "ds:DescribeConditionalForwarders",
                "lightsail:GetOperation",
                "ecs:DescribeServices",
                "lightsail:GetInstanceMetricData",
                "ecs:DescribeContainerInstances",
                "iam:GetSAMLProvider",
                "cognito-idp:DescribeUserImportJob",
                "cognito-idp:DescribeUserPoolClient",
                "inspector:DescribeFindings",
                "lightsail:GetActiveNames",
                "lightsail:GetInstanceSnapshot",
                "cognito-idp:GetUser",
                "iam:GetInstanceProfile",
                "lambda:GetFunction",
                "ec2:DescribeTags",
                "cognito-sync:DescribeIdentityPoolUsage",
                "cognito-identity:GetOpenIdTokenForDeveloperIdentity",
                "waf:GetRateBasedRuleManagedKeys",
                "cognito-idp:GetUserPoolMfaConfig",
                "ds:GetDirectoryLimits",
                "cloudhsm:DescribeHapg",
                "cognito-sync:ListIdentityPoolUsage",
                "rds:DescribeDBClusterSnapshots",
                "sso:ListApplicationInstanceCertificates",
                "rds:DownloadCompleteDBLogFile",
                "ds:ListIpRoutes",
                "lambda:GetPolicy",
                "sso:GetSSOStatus",
                "ecr:GetRepositoryPolicy"
            ],
            "Resource": "*"
        }
    ]
}
EOF
}

resource "aws_iam_role_policy_attachment" "grace_admins_policy_attachment" {
  role       = "${aws_iam_role.org_admin_role.name}"
  policy_arn = "${aws_iam_policy.GRACE_Org_Admins_Policy.arn}"
}

resource "aws_iam_role_policy_attachment" "grace_finance_policy_attachment" {
  role       = "${aws_iam_role.org_finance_role.name}"
  policy_arn = "${aws_iam_policy.GRACE_Org_Finance_Policy.arn}"
}

resource "aws_iam_role_policy_attachment" "grace_viewonly_policy_attachment_1" {
  role       = "${aws_iam_role.org_read_only_role.name}"
  policy_arn = "${aws_iam_policy.GRACE_Org_ViewOnly_Part1_Policy.arn}"
}

resource "aws_iam_role_policy_attachment" "grace_viewonly_policy_attachment_2" {
  role       = "${aws_iam_role.org_read_only_role.name}"
  policy_arn = "${aws_iam_policy.GRACE_Org_ViewOnly_Part2_Policy.arn}"
}
